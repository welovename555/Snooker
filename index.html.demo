<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>นับสกอ · by Name.</title>
  <!-- Tailwind only (no React/Babel) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          fontFamily: { sans: ["Sarabun", "system-ui", "sans-serif"] },
          colors: {
            gold: { 400: "#f4d367", 500: "#f5c542", 600: "#e0a93a" },
          },
          boxShadow: {
            soft: "0 10px 30px rgba(0,0,0,.35)",
            glow: "0 0 0 2px rgba(255,255,255,.06), 0 10px 30px rgba(0,0,0,.45)",
          },
          keyframes: {
            floaty: { '0%,100%': { transform: 'translateY(0)' }, '50%': { transform: 'translateY(-6px)' } },
            shimmer: { '0%': { backgroundPosition: '0% 50%' }, '100%': { backgroundPosition: '200% 50%' } },
            pop: { '0%': { transform:'scale(.92)', opacity:.0 }, '100%': { transform:'scale(1)', opacity:1 } },
            confetti: { '0%': { transform: 'translateY(-80vh) rotate(0deg)' }, '100%': { transform: 'translateY(20vh) rotate(540deg)', opacity:.9 } },
            flare: { '0%': { opacity:.0, transform:'scale(.8)' }, '100%': { opacity:1, transform:'scale(1)' } }
          },
          animation: {
            floaty: 'floaty 4s ease-in-out infinite',
            shimmer: 'shimmer 2.2s linear infinite',
            pop: 'pop .28s ease-out both',
            flare: 'flare .4s ease-out both'
          }
        }
      }
    }
  </script>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;600;700;800&display=swap" rel="stylesheet" />
  <style>
    :root{ --safe-bottom: env(safe-area-inset-bottom); }
    html,body{ height:100%; }
    body{ font-family:'Sarabun',system-ui,-apple-system,Segoe UI,Roboto,sans-serif; }
    .gold-text{ background: linear-gradient(92deg,#f5e6a1,#f4c95d,#f8dd9a); -webkit-background-clip:text; background-clip:text; color:transparent; filter: drop-shadow(0 2px 8px rgba(245,201,93,.25)); }
    .card-glass{ background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.04)); }
    .btn-glass{ background: linear-gradient(180deg, rgba(255,255,255,.10), rgba(255,255,255,.06)); }
    .grid-anim:before, .grid-anim:after{ content:""; position:absolute; inset:-50%; background: radial-gradient(closest-side, rgba(56,189,248,.06), transparent 70%) 0 0/40% 40% repeat; transform: rotate(15deg); animation: floaty 14s linear infinite; }
    .grid-anim:after{ background: radial-gradient(closest-side, rgba(236,72,153,.05), transparent 70%) 0 0/45% 45% repeat; animation-duration: 18s; animation-direction: reverse; }

    /* Ball sphere effect */
    .sphere{ position:relative; border-radius:9999px; box-shadow: inset 0 -10px 24px rgba(0,0,0,.45), inset 0 12px 18px rgba(255,255,255,.25), 0 8px 24px rgba(0,0,0,.35); }
    .sphere:after{ content:""; position:absolute; inset:0; border-radius:9999px; background: radial-gradient(circle at 30% 30%, rgba(255,255,255,.55), rgba(255,255,255,0) 44%); pointer-events:none; }
    .press{ transform: translateY(0); transition: transform .08s ease; }
    .press:active{ transform: translateY(2px) scale(.98); }

    /* Ripple */
    .ripple{ position:absolute; border-radius:9999px; transform: translate(-50%,-50%); pointer-events:none; width:10px; height:10px; background: radial-gradient(circle, rgba(255,255,255,.6), rgba(255,255,255,0) 70%); animation: ripple .6s ease-out forwards; }
    @keyframes ripple{ from { opacity:.7; transform:translate(-50%,-50%) scale(.8);} to { opacity:0; transform:translate(-50%,-50%) scale(8);} }

    /* Absolute centered label to prevent drift on tab switch */
    .center-abs{ position:absolute; top:50%; left:50%; transform:translate(-50%,-50%); pointer-events:none; will-change:transform; }

    /* Notice styling */
    #noticeCard{ box-shadow: 0 12px 40px rgba(0,0,0,.45); }
    #noticeBar{ position:absolute; inset:0 auto 0 0; background: linear-gradient(90deg, rgba(255,255,255,.2), rgba(255,255,255,.05)); }
    #noticeBar::after{ content:""; position:absolute; inset:0; background: linear-gradient(90deg, transparent, rgba(255,255,255,.35), transparent); background-size: 200% 100%; animation: shimmer 2.2s linear infinite; mix-blend-mode: screen; }
    #noticeBall{ box-shadow: 0 6px 14px rgba(0,0,0,.35), inset 0 8px 12px rgba(255,255,255,.28); }
  </style>
</head>
<body class="bg-slate-950 text-slate-100 relative overflow-x-hidden">
  <!-- Ambient animated backdrop -->
  <div class="pointer-events-none fixed inset-0 -z-10 grid-anim"></div>

  <div id="app" class="min-h-screen w-full flex justify-center">
    <div class="w-full max-w-[428px] mx-auto pb-[calc(24px+var(--safe-bottom))]">
      <!-- Header / Brand -->
      <header class="sticky top-0 z-30 backdrop-blur bg-slate-950/70 border-b border-white/10">
        <div class="px-4 py-3 flex items-center justify-between">
          <div class="flex items-center gap-3">
            <!-- Luxe logo: gold crown + ball -->
            <div class="relative w-10 h-10 grid place-items-center rounded-2xl shadow-glow" aria-hidden="true">
              <svg viewBox="0 0 64 64" class="w-10 h-10 animate-floaty">
                <defs>
                  <linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
                    <stop offset="0%" stop-color="#f6e7b0"/>
                    <stop offset="55%" stop-color="#f4c95d"/>
                    <stop offset="100%" stop-color="#e7b94b"/>
                  </linearGradient>
                </defs>
                <circle cx="32" cy="36" r="18" fill="url(#g)"/>
                <path d="M10 22 L22 14 L32 22 L42 14 L54 22 L50 30 H14 Z" fill="#f5d26a" opacity="0.95"/>
              </svg>
            </div>
            <div>
              <div class="text-2xl font-extrabold leading-6 gold-text">นับสกอ</div>
              <div class="text-[11px] text-slate-400">by Name.</div>
            </div>
          </div>
          <div class="flex items-center gap-2">
            <button data-action="reset" class="px-3 py-2 rounded-xl btn-glass hover:bg-white/20 ring-1 ring-white/10">เริ่มเกมส์ใหม่</button>
            <button data-action="end" class="px-3 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-700 shadow-soft">จบเกมส์</button>
          </div>
        </div>
      </header>

      <!-- Main -->
      <main class="px-4 space-y-4">
        <!-- Players -->
        <section class="p-4 rounded-2xl card-glass border border-white/10 shadow-glow">
          <!-- Add -->
          <div class="flex gap-2 items-center">
            <input id="nameInput" placeholder="เพิ่มผู้เล่นใหม่… (เช่น Name)" class="flex-1 px-4 py-3 rounded-xl bg-white/10 border border-white/10 outline-none focus:ring-2 focus:ring-sky-400" />
            <button data-action="add-player" class="px-4 py-3 rounded-xl bg-sky-500 hover:bg-sky-600 font-semibold shadow-soft">เพิ่ม</button>
          </div>
          <!-- List -->
          <div id="playersList" class="mt-4 grid grid-cols-1 gap-3"></div>
        </section>

        <!-- Pad -->
        <section class="p-4 rounded-2xl card-glass border border-white/10 shadow-glow">
          <div class="flex items-center justify-between mb-3">
            <div class="text-sm text-slate-300">ผู้เล่นที่เลือก:</div>
            <div id="selectedName" class="font-semibold text-sky-300 truncate">—</div>
          </div>
          <!-- + Points (Ball Icons) -->
          <div>
            <div class="text-sm mb-2">เพิ่มคะแนนตามสีลูก</div>
            <div id="ballsPad" class="grid grid-cols-4 gap-3"></div>
          </div>
          <!-- Foul -4 only -->
          <div class="mt-4">
            <div class="text-sm mb-2">ฟาวล์</div>
            <button data-action="foul" class="relative overflow-hidden w-full rounded-2xl py-3 bg-rose-600 hover:bg-rose-700 active:scale-[.99] transition shadow-soft disabled:opacity-40 disabled:cursor-not-allowed">
              <span class="relative z-10">ฟาวล์ -4</span>
              <span class="pointer-events-none absolute inset-0 bg-gradient-to-r from-white/10 via-white/0 to-white/10 animate-shimmer [background-size:200%_100%]"></span>
            </button>
          </div>
        </section>

        <!-- Results Log -->
        <section class="p-4 rounded-2xl card-glass border border-white/10 shadow-glow">
          <div class="flex items-center justify-between">
            <h2 class="font-semibold">บันทึกผล</h2>
            <div id="resultsCount" class="text-xs text-slate-400">0 รายการ</div>
          </div>

          <!-- Filters & Tools -->
          <div class="mt-3 flex flex-wrap items-center justify-between gap-3">
            <div class="flex flex-wrap items-center gap-2">
              <div class="inline-flex rounded-xl overflow-hidden ring-1 ring-white/10">
                <button data-action="filter-all" class="px-3 py-1.5 text-sm bg-white/10">ทั้งหมด</button>
                <button data-action="filter-player" class="px-3 py-1.5 text-sm hover:bg-white/10">เลือกผู้เล่น</button>
              </div>
              <select id="filterPlayer" class="px-3 py-1.5 text-sm rounded-xl bg-white/10 border border-white/10 disabled:opacity-40">
                <option value="">— เลือกผู้เล่น —</option>
              </select>
            </div>
            <div class="flex items-center gap-2" id="historyTools">
              <button data-action="history-edit-toggle" class="px-3 py-1.5 text-sm rounded-xl btn-glass hover:bg-white/20">แก้ไข</button>
              <button id="btnDeleteSelected" data-action="history-delete-selected" class="px-3 py-1.5 text-sm rounded-xl bg-rose-600 hover:bg-rose-700 hidden disabled:opacity-40" disabled>ลบที่เลือก</button>
              <button id="btnDeleteAll" data-action="history-delete-all" class="px-3 py-1.5 text-sm rounded-xl bg-rose-600/80 hover:bg-rose-600 hidden">ลบทั้งหมด</button>
              <span id="selCount" class="text-xs text-slate-400 hidden">เลือก 0 รายการ</span>
            </div>
          </div>

          <div id="resultsList" class="mt-3 space-y-2"></div>
        </section>
      </main>
    </div>
  </div>

  <!-- Centered Notice (modern progress + running ball) -->
  <div id="notice" class="fixed inset-0 z-[60] grid place-items-center pointer-events-none hidden">
    <div id="noticeCard" class="min-w-[280px] w-[min(92vw,420px)] px-4 py-3 rounded-2xl bg-white/10 border border-white/15 backdrop-blur animate-pop">
      <div class="flex items-center justify-center gap-2 text-xs text-slate-200">
        <svg width="14" height="14" viewBox="0 0 24 24" class="opacity-80"><path fill="currentColor" d="M12 2a10 10 0 1 0 10 10A10.011 10.011 0 0 0 12 2m1 15h-2v-2h2Zm0-4h-2V7h2Z"/></svg>
        <span id="noticeLabel">บันทึกการกด</span> · <span id="noticeText" class="text-emerald-300 font-semibold"></span>
      </div>
      <div class="mt-2 h-3 rounded-full bg-white/10 relative overflow-hidden">
        <div id="noticeBar" class="absolute inset-y-0 left-0" style="width:0%"></div>
        <div id="noticeBall" class="absolute top-1/2 -translate-y-1/2 w-6 h-6 rounded-full ring-1 ring-white/40" style="left:-12px"></div>
      </div>
      <div id="noticePct" class="mt-1 text-center text-[10px] text-slate-300">0%</div>
    </div>
  </div>

  <!-- Grand Celebrate Overlay (for end game) -->
  <div id="celebrate" class="fixed inset-0 z-[70] hidden">
    <div class="absolute inset-0 bg-gradient-to-br from-slate-900/80 via-slate-800/70 to-slate-900/80 backdrop-blur-sm"></div>
    <div id="celebrateFX" class="absolute inset-0 overflow-hidden pointer-events-none"></div>
    <div class="absolute inset-0 grid place-items-center p-4">
      <div class="relative w-[min(96vw,440px)] rounded-3xl border border-white/10 shadow-2xl card-glass animate-pop">
        <div class="absolute -top-8 left-1/2 -translate-x-1/2 w-16 h-16 rounded-full grid place-items-center" aria-hidden="true">
          <svg viewBox="0 0 64 64" class="w-16 h-16 animate-floaty">
            <defs>
              <linearGradient id="cg" x1="0" y1="0" x2="1" y2="1">
                <stop offset="0%" stop-color="#f6e7b0"/>
                <stop offset="55%" stop-color="#f4c95d"/>
                <stop offset="100%" stop-color="#e7b94b"/>
              </linearGradient>
            </defs>
            <path d="M10 22 L22 14 L32 22 L42 14 L54 22 L50 30 H14 Z" fill="url(#cg)"/>
          </svg>
        </div>
        <div class="px-5 pt-10 pb-5 text-center">
          <h3 class="text-2xl font-extrabold gold-text">จบเกมส์</h3>
          <p id="celebrateMsg" class="mt-1 text-slate-200"></p>
          <div id="celebrateBoard" class="mt-4 text-left"></div>
          <div class="mt-5 flex items-center justify-center gap-2">
            <button data-action="celebrate-close" class="px-4 py-2 rounded-xl btn-glass hover:bg-white/20">ปิด</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Simple Modal (fallback) -->
  <div id="modal" class="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm grid place-items-center p-4 hidden">
    <div class="w-full max-w-sm rounded-2xl bg-slate-900 border border-white/10 shadow-2xl p-5">
      <h3 id="modalTitle" class="text-lg font-bold mb-2"></h3>
      <p id="modalMsg" class="text-slate-300"></p>
      <div class="mt-4 flex justify-end gap-2" id="modalButtons">
        <button data-action="modal-close" class="px-4 py-2 rounded-lg btn-glass hover:bg-white/20">ปิด</button>
      </div>
    </div>
  </div>

  <!-- Beautiful Confirm Dialog -->
  <div id="confirm" class="fixed inset-0 z-[80] hidden">
    <div class="absolute inset-0 bg-gradient-to-br from-rose-900/40 via-slate-900/60 to-rose-900/40 backdrop-blur-sm"></div>
    <div class="absolute inset-0 grid place-items-center p-4">
      <div class="relative w-[min(96vw,420px)] rounded-3xl border border-white/10 shadow-2xl card-glass animate-pop">
        <div class="absolute -top-8 left-1/2 -translate-x-1/2 w-16 h-16 grid place-items-center" aria-hidden="true">
          <svg viewBox="0 0 64 64" class="w-16 h-16 animate-floaty">
            <defs>
              <linearGradient id="dg" x1="0" y1="0" x2="1" y2="1">
                <stop offset="0%" stop-color="#fecaca"/>
                <stop offset="60%" stop-color="#f87171"/>
                <stop offset="100%" stop-color="#ef4444"/>
              </linearGradient>
            </defs>
            <circle cx="32" cy="32" r="20" fill="url(#dg)"/>
            <path d="M32 18 v18" stroke="#1f2937" stroke-width="4" stroke-linecap="round"/>
            <circle cx="32" cy="44" r="2.5" fill="#1f2937"/>
          </svg>
        </div>
        <div class="px-5 pt-10 pb-5 text-center">
          <h3 id="confirmTitle" class="text-xl font-extrabold">ยืนยันการลบ</h3>
          <p id="confirmMsg" class="mt-2 text-slate-300">ต้องการลบข้อมูลนี้หรือไม่? การกระทำนี้ไม่สามารถย้อนกลับได้</p>
          <div class="mt-5 flex items-center justify-center gap-2">
            <button data-action="confirm-cancel" class="px-4 py-2 rounded-xl btn-glass hover:bg-white/20">ยกเลิก</button>
            <button data-action="confirm-ok" class="px-4 py-2 rounded-xl bg-rose-600 hover:bg-rose-700 shadow-soft">ยืนยันลบ</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Dev Tests (collapsed) -->
  <details id="dev-tests" class="px-4 py-2 select-none opacity-60">
    <summary class="cursor-pointer text-xs">Self-tests (dev)</summary>
    <pre id="testsOut" class="text-[11px] whitespace-pre-wrap"></pre>
  </details>

  <script>
  (function(){
    'use strict';
    // ===== Constants / Theme =====
    const STORAGE_KEY = 'snooker-lite-v8';
    const GREEN = '#10b981';
    const RED = '#ef4444';
    const DURATION_PLUS = 1000;   // 1s for +
    const DURATION_FOUL = 1000;   // 1s for foul
    const BALLS = [
      { key:'red',    label:'แดง',   value:1, hex:'#ef4444' },
      { key:'yellow', label:'เหลือง',value:2, hex:'#fde047' },
      { key:'green',  label:'เขียว', value:3, hex:'#22c55e' },
      { key:'brown',  label:'น้ำตาล',value:4, hex:'#92400e' },
      { key:'blue',   label:'น้ำเงิน',value:5, hex:'#2563eb' },
      { key:'pink',   label:'ชมพู',  value:6, hex:'#ec4899' },
      { key:'black',  label:'ดำ',    value:7, hex:'#0b0b0b' },
    ];

    // ===== State =====
    const state = {
      players: [],        // [{id,name,score}]
      selectedId: null,
      results: [],        // [{id,at,players:[{id,name,score}],winnerIds:[id]}]
      expanded: new Set(), // UI only
      filter: { mode: 'all', playerId: '' }, // history filter
      historyEditMode: false,
      selectedHistoryIds: new Set(),
    };

    // ===== Utils =====
    const qs = sel => document.querySelector(sel);
    // NOTE: rename $$ → $$$ to avoid duplicate variable errors in certain sandboxes/devtools
    const $$$ = sel => Array.from(document.querySelectorAll(sel));
    const uid = () => (crypto?.randomUUID?.() || `id_${Date.now()}_${Math.random().toString(36).slice(2,8)}`);
    const clamp = n => n|0; // integer only, allow negative

    function save(){
      try{ localStorage.setItem(STORAGE_KEY, JSON.stringify({ players: state.players, selectedId: state.selectedId, results: state.results, filter: state.filter })); }catch(e){}
    }
    function load(){
      try{
        const raw = localStorage.getItem(STORAGE_KEY) || localStorage.getItem('snooker-lite-v7') || localStorage.getItem('snooker-lite-v6') || localStorage.getItem('snooker-lite-v5') || localStorage.getItem('snooker-lite-v4') || localStorage.getItem('snooker-lite-v3');
        if(raw){
          const s = JSON.parse(raw);
          state.players = Array.isArray(s.players)? s.players: [];
          state.selectedId = s.selectedId ?? null;
          state.results = Array.isArray(s.results)? s.results: [];
          if(s.filter) state.filter = { ...state.filter, ...s.filter };
        }
      }catch(e){ console.warn('Load failed', e); }
    }

    function selected(){ return state.players.find(p=>p.id===state.selectedId) || null; }

    function computeWinners(players){
      if(players.length===0) return { top:0, winnerIds: [], winners: [] };
      const top = Math.max(...players.map(p=>p.score));
      const winners = players.filter(p=>p.score===top);
      return { top, winnerIds: winners.map(w=>w.id), winners };
    }

    // Rank helper: returns sorted players with competition ranking (1,2,2,4)
    function rankPlayers(players){
      const sorted = players.slice().sort((a,b)=> b.score - a.score);
      let lastScore = null, lastRank = 0;
      return sorted.map((p,i)=>{
        const pos = (lastScore===null || p.score < lastScore) ? (i+1) : lastRank;
        lastScore = p.score; lastRank = pos;
        return { ...p, pos };
      });
    }

    function filterResults(entries){
      if(state.filter.mode==='all' || !state.filter.playerId) return entries;
      return entries.filter(r => r.players.some(p => p.id === state.filter.playerId));
    }

    function removeEntriesByIds(list, idsSet){ return list.filter(r => !idsSet.has(r.id)); }

    function cleanupExpanded(){ state.expanded = new Set([...state.expanded].filter(id => state.results.some(r=> r.id===id))); }

    // ===== Notice (centered) =====
    let noticeRAF = null;
    function runNotice({ kind='plus', text='', ballColor='#fff', barColor=GREEN, durationMs=DURATION_PLUS }){
      const wrap = qs('#notice');
      const bar = qs('#noticeBar');
      const ball = qs('#noticeBall');
      const pct = qs('#noticePct');
      const label = qs('#noticeLabel');
      const txt = qs('#noticeText');
      label.textContent = kind==='foul'? 'ฟาวล์' : 'บันทึกการกด';
      txt.textContent = text || '';
      txt.className = kind==='foul' ? 'text-rose-300 font-semibold' : 'text-emerald-300 font-semibold';
      // prettier bar + ball color
      bar.style.background = `linear-gradient(90deg, ${barColor} 0%, rgba(255,255,255,.15) 100%)`;
      ball.style.background = `radial-gradient(circle at 30% 30%, rgba(255,255,255,.7), rgba(255,255,255,0) 55%), ${ballColor}`;
      wrap.classList.remove('hidden');
      const start = performance.now();
      const tick = now => {
        const p = Math.min(100, Math.round((now-start)/durationMs*100));
        bar.style.width = p + '%';
        ball.style.left = `calc(${p}% - 12px)`;
        pct.textContent = p + '%';
        if(p < 100){ noticeRAF = requestAnimationFrame(tick); } else { setTimeout(()=> wrap.classList.add('hidden'), 80); }
      };
      cancelAnimationFrame(noticeRAF); noticeRAF = requestAnimationFrame(tick);
    }

    // ===== Celebrate (grand popup) =====
    function showCelebrate(entry){
      // Confetti
      const fx = qs('#celebrateFX');
      fx.innerHTML = '';
      const colors = ['#ef4444','#fde047','#22c55e','#2563eb','#ec4899','#ffffff','#f5c542'];
      for(let i=0;i<80;i++){
        const d = document.createElement('div');
        const size = Math.random()*8+6;
        d.style.position='absolute';
        d.style.left = Math.random()*100+'%';
        d.style.top = (-Math.random()*80)+'vh';
        d.style.width = size+'px';
        d.style.height = (size*0.6)+'px';
        d.style.background = colors[(Math.random()*colors.length)|0];
        d.style.opacity = .95;
        d.style.transform = `rotate(${Math.random()*360}deg)`;
        d.style.filter = 'drop-shadow(0 4px 6px rgba(0,0,0,.25))';
        d.style.animation = `confetti ${6+Math.random()*4}s cubic-bezier(.2,.6,.2,1) forwards`;
        d.style.animationDelay = (Math.random()*0.8)+'s';
        d.style.borderRadius = '3px';
        fx.appendChild(d);
      }

      const msgEl = qs('#celebrateMsg');
      const board = qs('#celebrateBoard');
      const { winners } = computeWinners(entry.players);
      if(winners.length===1){
        msgEl.innerHTML = `ผู้ชนะคือ <span class="gold-text font-extrabold">${escapeHtml(winners[0].name)}</span> ด้วยคะแนน <b>${winners[0].score}</b>`;
      } else {
        msgEl.innerHTML = `ผลเสมอ: <span class="text-amber-300 font-semibold">${escapeHtml(winners.map(w=>w.name).join(' • '))}</span> (${winners[0]?.score ?? 0} แต้ม)`;
      }
      const rows = rankPlayers(entry.players).map(p=>{
        return `<div class="flex items-center justify-between px-3 py-2 rounded-xl bg-white/5 border border-white/10 mt-2">
          <div class="font-semibold"><span class="text-slate-400 mr-1">#${p.pos}</span>${escapeHtml(p.name)}</div>
          <div class="text-lg font-extrabold">${p.score}</div>
        </div>`;
      }).join('');
      board.innerHTML = rows;

      qs('#celebrate').classList.remove('hidden');
    }
    function hideCelebrate(){ qs('#celebrate').classList.add('hidden'); }

    // ===== Renderers =====
    function render(){
      // Selected name
      qs('#selectedName').textContent = selected()?.name || '—';

      // Players list
      const list = qs('#playersList');
      if(state.players.length===0){
        list.innerHTML = `<div class="p-6 rounded-2xl border border-dashed border-white/20 bg-white/5 text-slate-400 text-center">ยังไม่มีผู้เล่น — เพิ่มชื่อด้านบนได้เลย</div>`;
      } else {
        list.innerHTML = state.players.map(p=>`
          <div class="p-4 rounded-2xl border-2 transition select-none cursor-pointer ${state.selectedId===p.id? 'border-sky-400 bg-sky-400/15':'border-white/10 bg-white/5 hover:bg-white/10'}" data-action="select-player" data-id="${p.id}">
            <div class="flex items-start justify-between gap-3">
              <div class="font-semibold text-lg truncate">${escapeHtml(p.name)}</div>
              <div class="text-5xl font-extrabold tabular-nums">${p.score}</div>
            </div>
            <div class="mt-3 flex items-center justify-between">
              <div class="text-xs text-slate-400">แตะการ์ดนี้เพื่อเลือก</div>
              <button class="px-2 py-1 text-xs rounded-lg bg-rose-600/80 hover:bg-rose-600" data-action="delete-player" data-id="${p.id}">ลบ</button>
            </div>
          </div>
        `).join('');
      }

      // Balls pad (fancy spheres + robust centered labels)
      const pad = qs('#ballsPad');
      pad.innerHTML = BALLS.map(b=>`
        <button class="relative aspect-square rounded-full sphere press ring-1 ring-white/15 transition overflow-hidden" data-action="ball" data-key="${b.key}" style="background:${b.hex}">
          <span class="absolute inset-0 opacity-0 active:opacity-20 transition" style="background: radial-gradient(circle at 50% 50%, rgba(255,255,255,.8), rgba(255,255,255,0) 60%)"></span>
          <span class="center-abs text-[13px] font-extrabold drop-shadow">${b.label}</span>
          <span class="absolute bottom-1 right-1 text-[10px] font-bold">+${b.value}</span>
        </button>
      `).join('');

      // Filters UI state
      const allBtn = document.querySelector('[data-action="filter-all"]');
      const playerBtn = document.querySelector('[data-action="filter-player"]');
      const sel = qs('#filterPlayer');
      allBtn.classList.toggle('bg-white/10', state.filter.mode==='all');
      playerBtn.classList.toggle('bg-white/10', state.filter.mode==='player');
      sel.disabled = state.filter.mode!=='player';
      sel.innerHTML = `<option value="">— เลือกผู้เล่น —</option>` + state.players.map(p=> `<option value="${p.id}" ${state.filter.playerId===p.id?'selected':''}>${escapeHtml(p.name)}</option>`).join('');

      // Tools visibility in edit mode
      const editBtn = document.querySelector('[data-action="history-edit-toggle"]');
      const btnSel = qs('#btnDeleteSelected');
      const btnAll = qs('#btnDeleteAll');
      const selCount = qs('#selCount');
      if(editBtn){ editBtn.textContent = state.historyEditMode ? 'เสร็จสิ้น' : 'แก้ไข'; }
      [btnSel, btnAll, selCount].forEach(el=> el && el.classList.toggle('hidden', !state.historyEditMode));
      selCount.textContent = `เลือก ${state.selectedHistoryIds.size} รายการ`;
      btnSel.disabled = state.selectedHistoryIds.size===0;

      // Results
      const filtered = filterResults(state.results);
      qs('#resultsCount').textContent = `${filtered.length} รายการ`;
      const rList = qs('#resultsList');
      rList.innerHTML = filtered.map(r=>{
        const { winners } = computeWinners(r.players);
        const ts = new Date(r.at).toLocaleString('th-TH');
        const isOpen = state.expanded.has(r.id);
        const header = winners.length===1
          ? `ผู้ชนะ: <span class=\"text-emerald-300\">${escapeHtml(winners[0].name)}</span> (${winners[0].score} แต้ม)`
          : `เสมอ: <span class=\"text-amber-300\">${escapeHtml(winners.map(w=>w.name).join(' • '))}</span> (${winners[0]?.score ?? 0} แต้ม)`;

        // Always show per-player scores in details, ranked 1..n (no margin display)
        let details = '';
        if(isOpen && !state.historyEditMode){
          const ranked = rankPlayers(r.players);
          details = `<div class=\"px-3 pb-3 space-y-1\">${ranked.map(p=>
            `<div class=\"flex items-center justify-between text-sm\">
               <div><span class=\"text-slate-400 mr-1\">#${p.pos}</span><span class=\"font-medium\">${escapeHtml(p.name)}</span></div>
               <div class=\"font-semibold\">${p.score}</div>
             </div>`
          ).join('')}</div>`;
        }

        const editControls = state.historyEditMode ? `
          <div class=\"px-3 pb-3 flex items-center justify-between\">
            <label class=\"flex items-center gap-2 text-sm\">
              <input type=\"checkbox\" data-action=\"history-select\" data-id=\"${r.id}\" ${state.selectedHistoryIds.has(r.id)?'checked':''} /> เลือกรายการนี้
            </label>
            <button class=\"px-3 py-1.5 text-xs rounded-lg bg-rose-600/80 hover:bg-rose-600\" data-action=\"history-delete-item\" data-id=\"${r.id}\">ลบรายการนี้</button>
          </div>` : '';

        return `
          <div class=\"rounded-xl card-glass border border-white/10\">
            <button class=\"w-full px-3 py-3 flex items-center justify-between\" data-action=\"toggle-result\" data-id=\"${r.id}\">
              <div class=\"text-left\">
                <div class=\"text-sm\"><span class=\"text-slate-400\">${ts}</span></div>
                <div class=\"font-semibold mt-0.5\">${header}</div>
              </div>
              <span class=\"text-xs text-slate-400\">${isOpen && !state.historyEditMode?'ซ่อนรายละเอียด':'ดูรายละเอียด'}</span>
            </button>
            ${state.historyEditMode ? '' : details}
            ${editControls}
          </div>`;
      }).join('');

      // Disable foul if no selection
      const foulBtn = document.querySelector('[data-action="foul"]');
      foulBtn.disabled = !selected();
    }

    function escapeHtml(s){ return String(s).replace(/[&<>"']/g, m=> ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[m]) ); }

    // ===== Actions =====
    function addPlayer(){
      const inp = qs('#nameInput');
      const name = (inp.value||'').trim();
      if(!name){ runNotice({ kind:'plus', ballColor:'#22c55e', text:'ใส่ชื่อก่อน', durationMs:DURATION_PLUS }); return; }
      const id = uid();
      state.players.push({ id, name, score: 0 });
      state.selectedId = id;
      inp.value='';
      save(); render();
    }
    function deletePlayer(id){
      state.players = state.players.filter(p=>p.id!==id);
      if(state.selectedId===id){ state.selectedId = state.players[0]?.id || null; }
      save(); render();
    }
    function selectPlayer(id){ state.selectedId = id; save(); render(); }

    function resetGame(){
      state.players = state.players.map(p=> ({...p, score: 0}));
      save(); render();
      runNotice({ kind:'plus', ballColor:'#22c55e', text:'เริ่มเกมส์ใหม่', durationMs:DURATION_PLUS });
    }

    function endGame(){
      if(state.players.length===0){ showModal('จบเกมส์','ยังไม่มีผู้เล่น'); return; }
      const { top, winnerIds, winners } = computeWinners(state.players);
      const entry = { id: uid(), at: Date.now(), players: state.players.map(p=> ({id:p.id,name:p.name,score:p.score})), winnerIds };
      state.results.unshift(entry);
      // reset scores automatically
      state.players = state.players.map(p=> ({...p, score: 0}));
      save(); render();
      showCelebrate(entry);
    }

    function applyScoreBallKey(key, evt){
      const ball = BALLS.find(b=>b.key===key);
      if(!ball) return;
      const sel = selected();
      if(!sel){ runNotice({ kind:'plus', ballColor:ball.hex, text:'เลือกผู้เล่นก่อน', durationMs:DURATION_PLUS }); return; }
      sel.score = clamp(sel.score + ball.value);
      save(); render();
      runNotice({ kind:'plus', ballColor:ball.hex, barColor:GREEN, durationMs:DURATION_PLUS, text:`+${ball.value}` });
      if(evt) ripple(evt.currentTarget);
    }

    // Foul -4; if 2 players → add +4 to the other; if >2 → only -4 to fouler (allow negative)
    function foul(){
      const sel = selected();
      if(!sel){ runNotice({ kind:'foul', ballColor:RED, barColor:RED, durationMs:DURATION_FOUL, text:'ยังไม่ได้เลือกผู้เล่น' }); return; }
      const others = state.players.filter(p=>p.id!==sel.id);
      if(others.length===0){
        sel.score = clamp(sel.score - 4);
        save(); render();
        runNotice({ kind:'foul', ballColor:RED, barColor:RED, durationMs:DURATION_FOUL, text:'ฟาวล์ -4' });
        return;
      }
      if(others.length===1){
        const opp = others[0];
        sel.score = clamp(sel.score - 4);
        opp.score = clamp(opp.score + 4);
        save(); render();
        runNotice({ kind:'foul', ballColor:RED, barColor:RED, durationMs:DURATION_FOUL, text:`ฟาวล์ -4 → ${opp.name} +4` });
        return;
      }
      // more than 2 players: only deduct from fouler
      sel.score = clamp(sel.score - 4);
      save(); render();
      runNotice({ kind:'foul', ballColor:RED, barColor:RED, durationMs:DURATION_FOUL, text:'ฟาวล์ -4 (ไม่แจกให้ใคร)' });
    }

    // ===== Pretty Confirm Dialog (Promise-based) =====
    let _confirmResolve = null;
    function confirmDialog({ title='ยืนยันการลบ', message='ต้องการลบข้อมูลนี้หรือไม่?', okText='ยืนยันลบ', cancelText='ยกเลิก' }={}){
      qs('#confirmTitle').textContent = title;
      qs('#confirmMsg').textContent = message;
      const el = qs('#confirm');
      el.classList.remove('hidden');
      return new Promise((resolve)=>{ _confirmResolve = (val)=>{ el.classList.add('hidden'); resolve(val); }; });
    }

    // ===== History delete actions =====
    async function toggleHistoryEdit(){
      state.historyEditMode = !state.historyEditMode;
      if(!state.historyEditMode) state.selectedHistoryIds.clear();
      render();
    }
    async function deleteAllHistory(){
      if(state.results.length===0) return;
      const ok = await confirmDialog({ title:'ยืนยันการลบทั้งหมด', message:'ต้องการลบประวัติทั้งหมดหรือไม่? การกระทำนี้ไม่สามารถย้อนกลับได้', okText:'ลบทั้งหมด' });
      if(!ok) return;
      state.results = [];
      state.selectedHistoryIds.clear();
      state.expanded.clear();
      save(); render();
    }
    async function deleteSelectedHistory(){
      const n = state.selectedHistoryIds.size;
      if(n===0) return;
      const ok = await confirmDialog({ title:'ยืนยันการลบ', message:`ต้องการลบ ${n} รายการที่เลือกหรือไม่?`, okText:'ลบที่เลือก' });
      if(!ok) return;
      state.results = removeEntriesByIds(state.results, state.selectedHistoryIds);
      cleanupExpanded();
      state.selectedHistoryIds.clear();
      save(); render();
    }
    async function deleteHistoryItem(id){
      const ok = await confirmDialog({ title:'ยืนยันการลบ', message:'ต้องการลบรายการนี้หรือไม่?', okText:'ลบรายการนี้' });
      if(!ok) return;
      state.results = state.results.filter(r=> r.id!==id);
      state.selectedHistoryIds.delete(id);
      state.expanded.delete(id);
      save(); render();
    }

    // ===== Modal helpers =====
    function showModal(title, message){
      qs('#modalTitle').textContent = title;
      qs('#modalMsg').textContent = message;
      qs('#modal').classList.remove('hidden');
    }
    function hideModal(){ qs('#modal').classList.add('hidden'); }

    // ===== Fancy interactions =====
    function ripple(el){
      const rect = el.getBoundingClientRect();
      const x = rect.width/2, y = rect.height/2;
      const span = document.createElement('span');
      span.className = 'ripple';
      span.style.left = x + 'px';
      span.style.top = y + 'px';
      el.appendChild(span);
      setTimeout(()=> span.remove(), 620);
    }

    // ===== Events (delegation) =====
    document.addEventListener('click', async (e)=>{
      const t = e.target.closest('[data-action]');
      if(!t) return;
      const act = t.getAttribute('data-action');
      if(act==='add-player') addPlayer();
      else if(act==='delete-player') deletePlayer(t.getAttribute('data-id'));
      else if(act==='select-player') selectPlayer(t.getAttribute('data-id'));
      else if(act==='reset') resetGame();
      else if(act==='end') endGame();
      else if(act==='ball') applyScoreBallKey(t.getAttribute('data-key'), { currentTarget: t });
      else if(act==='foul') { ripple(t); foul(); }
      else if(act==='modal-close') hideModal();
      else if(act==='celebrate-close') hideCelebrate();
      else if(act==='filter-all'){ state.filter.mode='all'; save(); render(); }
      else if(act==='filter-player'){ state.filter.mode='player'; save(); render(); }
      else if(act==='toggle-result'){
        if(state.historyEditMode) return; // don't toggle in edit mode
        const id = t.getAttribute('data-id');
        if(state.expanded.has(id)) state.expanded.delete(id); else state.expanded.add(id);
        render();
      }
      else if(act==='history-edit-toggle'){ await toggleHistoryEdit(); }
      else if(act==='history-delete-all'){ await deleteAllHistory(); }
      else if(act==='history-delete-selected'){ await deleteSelectedHistory(); }
      else if(act==='history-delete-item'){ await deleteHistoryItem(t.getAttribute('data-id')); }
      else if(act==='confirm-ok'){ if(_confirmResolve){ _confirmResolve(true); } }
      else if(act==='confirm-cancel'){ if(_confirmResolve){ _confirmResolve(false); } }
    });

    // Select change for history filter & selection
    document.addEventListener('change', (e)=>{
      if(e.target && e.target.id==='filterPlayer'){
        state.filter.playerId = e.target.value;
        save(); render();
      }
      if(e.target && e.target.getAttribute('data-action')==='history-select'){
        const id = e.target.getAttribute('data-id');
        if(e.target.checked) state.selectedHistoryIds.add(id); else state.selectedHistoryIds.delete(id);
        render(); // update counter & buttons
      }
    });

    // Enter to add
    qs('#nameInput').addEventListener('keydown', (e)=>{ if(e.key==='Enter') addPlayer(); });

    // Recenter on resume / rotate
    document.addEventListener('visibilitychange', ()=>{ if(!document.hidden) requestAnimationFrame(render); });
    window.addEventListener('resize', ()=>{ requestAnimationFrame(render); });

    // ===== Boot =====
    load();
    render();

    // ===== Self-tests (no UI change) =====
    (function runTests(){
      const out = [];
      function t(name, fn){ try{ fn(); out.push('✔ ' + name); } catch(err){ out.push('✘ ' + name + ' → ' + err.message); } }

      // Existing tests
      t('computeWinners empty', ()=>{ const r = computeWinners([]); if(r.winnerIds.length!==0 || r.top!==0) throw new Error('empty failed'); });
      t('computeWinners single winner', ()=>{ const r = computeWinners([{id:'a',score:5},{id:'b',score:3}]); if(r.top!==5 || r.winnerIds[0]!=='a') throw new Error('single failed'); });
      t('computeWinners tie', ()=>{ const r = computeWinners([{id:'a',score:7},{id:'b',score:7},{id:'c',score:2}]); if(r.top!==7 || r.winnerIds.length!==2) throw new Error('tie failed'); });

      // New tests per requirements
      t('foul can go negative', ()=>{ const A={id:'a',score:0}; A.score = clamp(A.score - 4); if(A.score!==-4) throw new Error('negative not allowed'); });
      t('foul 1v1 awards +4 to opponent', ()=>{ const A={id:'a',score:2}, B={id:'b',score:0}; A.score=clamp(A.score-4); B.score=clamp(B.score+4); if(A.score!==-2 || B.score!==4) throw new Error('1v1 foul logic wrong'); });
      t('foul >2 only deduct from fouler', ()=>{ const A={id:'a',score:6}, B={id:'b',score:5}, C={id:'c',score:1}; A.score=clamp(A.score-4); if(A.score!==2 || B.score!==5 || C.score!==1) throw new Error('multi foul logic wrong'); });
      t('applyScoreBall adds correctly', ()=>{ const P={id:'p',score:0}; P.score=clamp(P.score+7); if(P.score!==7) throw new Error('+7 failed'); });

      // Filter tests
      t('filter all returns all', ()=>{ const L=[{players:[{id:'a'},{id:'b'}]},{players:[{id:'c'}]}]; const old=state.filter; state.filter={mode:'all'}; const r=filterResults(L); if(r.length!==2) throw new Error('filter all failed'); state.filter=old; });
      t('filter by player id', ()=>{ const L=[{players:[{id:'a'},{id:'b'}]},{players:[{id:'c'}]}]; const old=state.filter; state.filter={mode:'player',playerId:'a'}; const r=filterResults(L); if(r.length!==1) throw new Error('filter player failed'); state.filter=old; });
      t('filter unknown player returns 0', ()=>{ const L=[{players:[{id:'x'}]},{players:[{id:'y'}]}]; const old=state.filter; state.filter={mode:'player',playerId:'z'}; const r=filterResults(L); if(r.length!==0) throw new Error('filter unknown failed'); state.filter=old; });

      // Deletion helpers
      t('removeEntriesByIds works', ()=>{
        const A=[{id:'1'},{id:'2'},{id:'3'}];
        const ids=new Set(['2','3']);
        const R=removeEntriesByIds(A, ids);
        if(R.length!==1 || R[0].id!=='1') throw new Error('removeEntriesByIds failed');
      });

      // Clamp behavior
      t('clamp truncates positive/negative', ()=>{ if(clamp(3.9)!==3 || clamp(-1.1)!==-1) throw new Error('clamp failed'); });

      // Extra new tests
      t('computeWinners accepts negative scores', ()=>{ const r = computeWinners([{id:'a',score:-4},{id:'b',score:-2}]); if(r.top!==-2 || r.winnerIds[0]!=='b') throw new Error('negative winner failed'); });
      t('removeEntriesByIds with empty set keeps length', ()=>{ const A=[{id:'1'},{id:'2'}]; const ids=new Set(); const R=removeEntriesByIds(A, ids); if(R.length!==2) throw new Error('empty set removal failed'); });
      // New test for rankPlayers: order + competition ranking
      t('rankPlayers orders and ranks with ties', ()=>{
        const L=[{id:'a',score:10},{id:'b',score:7},{id:'c',score:7},{id:'d',score:3}];
        const R=rankPlayers(L);
        const order=R.map(x=>x.id).join(',');
        const pos=R.map(x=>x.pos).join(',');
        if(order!== 'a,b,c,d') throw new Error('order wrong: '+order);
        if(pos!== '1,2,2,4') throw new Error('ranking wrong: '+pos);
      });

      const el = document.getElementById('testsOut'); if(el) el.textContent = out.join('\n');
      try{ out.forEach(x=> console.log('[TEST]', x)); }catch(_){ }
    })();
  })();
  </script>
</body>
</html>
